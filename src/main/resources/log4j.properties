############################################################################   
#         log4j配置相关说明  
############################################################################   
  
#配置日志信息输出目的地 Appender ，其语法为： 
#log4j.appender.appenderName = fully.qualified.name.of.appender.class. 其中， Log4j 提供的 appender 有以下几种： 
#1.org.apache.log4j.ConsoleAppender （控制台）， 
#2.org.apache.log4j.FileAppender （文件）， 
#3.org.apache.log4j.DailyRollingFileAppender （每天产生一个日志文件）， 
#4.org.apache.log4j.RollingFileAppender （文件大小到达指定尺寸的时候产生一个新的文件） 
#5.org.apache.log4j.WriterAppender （将日志信息以流格式发送到任意指定的地方）

#log4j提供4种布局:   
#org.apache.log4j.HTMLLayout（以HTML表格形式布局）  
#org.apache.log4j.PatternLayout（可以灵活地指定布局模式），  
#org.apache.log4j.SimpleLayout（包含日志信息的级别和信息字符串），  
#org.apache.log4j.TTCCLayout（包含日志产生的时间、线程、类别等等信息  

#%p 输出优先级，即DEBUG，INFO，WARN，ERROR，FATAL   
#%r 输出自应用启动到输出该log信息耗费的毫秒数   
#%c 输出所属的类目，通常就是所在类的全名   
#%t 输出产生该日志事件的线程名  
#%m 输出代码中指定的信息   
#%n 输出一个回车换行符，Windows平台为“\r\n”，Unix平台为“\n”   
#%d 输出日志时间点的日期或时间，默认格式为ISO8601，也可以在其后指定格式，比如：%d{yyyy MM dd HH:mm:ss,SSS}，输出类似： 2002年10月18日 22：10：28，921   
#%l 输出日志事件的发生位置，包括类目名、发生的线程，以及在代码中的行数。举例：Testlog4.main(TestLog4.java:10)   
  
#log4j中有五级logger 输出级别:  
#FATAL 0 ERROR 3 WARN 4 INFO 6 DEBUG 7 
#level 是日志记录的优先级，分为 OFF 、 FATAL 、 ERROR 、 WARN 、 INFO 、 DEBUG 、 ALL 或者您定义的级别。 
#Log4j 建议只使用四个级别 ，优先级从高到低分别是 ERROR 、 WARN 、 INFO 、 DEBUG 。
#通过在这里定义的级别，您可以控制到应用程序中相应级别的日志信息的开关。比如在这里定义了 INFO 级别，则应用程序中所有 DEBUG 级别的日志信息将不被打印出来 。

#Log配置根 Logger 
log4j.rootLogger=INFO,stdout,D,E

###说明：Appender是一个非常重要的类，因为其解决把日记输出到哪里的问题，例如控制台、文件等
 
############################################################################  
#          输出到控制台（ConsoleAppender）的配置说明
############################################################################ 
#ConsoleAppender 输出控制台
log4j.appender.stdout = org.apache.log4j.ConsoleAppender
log4j.appender.stdout.Target = System.out
#日志输出等级（debug），Threshold是个全局的过滤器，它将把低于所设置的level的信息过滤不显示出来。
log4j.appender.stdout.Threshold = debug
#设置输出样式
log4j.appender.stdout.layout = org.apache.log4j.PatternLayout
log4j.appender.stdout.layout.ConversionPattern=%d{ABSOLUTE} %5p %c{1}:%L - %m%n
#log4j.appender.stdout.layout.ConversionPattern = [%-5p] %d{yyyy-MM-dd HH:mm:ss,SSS} method:%l%n%m%n
 
############################################################################  
#          DEBUG 输出日志配置
############################################################################ 
#每天产生一个日志文件
log4j.appender.D = org.apache.log4j.DailyRollingFileAppender
#设置文件输出路径
log4j.appender.D.File = ${catalina.base}/logs/sinoesb-debug.log
#是否追加到文件末尾
#log4j.appender.D.Append = true
#日志输出编码
log4j.appender.D.Encoding=UTF-8 
#日志输出等级（debug），Threshold是个全局的过滤器，它将把低于所设置的level的信息过滤不显示出来。
log4j.appender.D.Threshold = debug
#文件后缀名称
log4j.appender.D.DatePattern = '.'yyyy-MM-dd 
#设置输出样式
log4j.appender.D.layout = org.apache.log4j.PatternLayout
#打印信息的具体格式ConversionPattern
log4j.appender.D.layout.ConversionPattern = %-d{yyyy-MM-dd HH:mm:ss}  [ %t:%r ] - [ %p ]  %m%n
 
############################################################################  
#          ERROR 输出日志配置
############################################################################ 
#每天产生一个日志文件
log4j.appender.E = org.apache.log4j.DailyRollingFileAppender
#设置文件输出路径
log4j.appender.E.File =${catalina.base}/logs/sinoesb-error.log
#是否追加到文件末尾
#log4j.appender.E.Append = true
#文件后缀名称
log4j.appender.E.DatePattern = '.'yyyy-MM-dd 
#日志输出编码
log4j.appender.E.Encoding=UTF-8 
#日志输出等级（ERROR），Threshold是个全局的过滤器，它将把低于所设置的level的信息过滤不显示出来。
log4j.appender.E.Threshold = ERROR
#设置输出样式
log4j.appender.E.layout = org.apache.log4j.PatternLayout  
#打印信息的具体格式ConversionPattern
log4j.appender.E.layout.ConversionPattern = %-d{yyyy-MM-dd HH:mm:ss}  [ %t:%r ] - [ %p ]  %m%n

############################################################################  
#          WebSerivce 输出日志配置
############################################################################
#日志级别及参数
log4j.logger.WS=INFO,WS
#每天产生一个日志文件
log4j.appender.WS=org.apache.log4j.DailyRollingFileAppender
#设置文件输出路径    
log4j.appender.WS.File=${catalina.base}/logs/sinoesb-webservice.log
#日志输出编码
log4j.appender.D.Encoding=UTF-8 
#设置输出样式
log4j.appender.WS.layout=org.apache.log4j.PatternLayout
#每天生成一个日志文件
log4j.appender.WS.DatePattern  ='.'yyyy-MM-dd
#打印信息的具体格式ConversionPattern    
log4j.appender.WS.layout.ConversionPattern=%d-[ws] %p %t %c - %m%n 
 
############################################################################  
#          hibernate相关配置
############################################################################ 
#输出hibernate的日志  
log4j.logger.org.hibernate=debug  
#log HQL query parser activity
log4j.logger.org.hibernate.hql.ast.AST=debug   
#下面的两条配置非常重要，设置为trace后，将可以看到打印出sql中 ？ 占位符的实际内容  
#log just the SQL 
log4j.logger.org.hibernate.SQL=debug   
### log JDBC bind parameters ###  
log4j.logger.org.hibernate.type=debug  
log4j.logger.org.hibernate.type.descriptor.sql.BasicBinder=debug  
#above two configs 
#log schema export/update  
log4j.logger.org.hibernate.tool.hbm2ddl=debug
#log HQL parse trees  
log4j.logger.org.hibernate.hql=debug  
#log cache activity
log4j.logger.org.hibernate.cache=INFO
#log transaction activity  
log4j.logger.org.hibernate.transaction=INFO   
# log JDBC resource acquisition
log4j.logger.org.hibernate.jdbc=INFO   
#enable the following line if you want to track down connection  
#leakages when using DriverManagerConnectionProvider
log4j.logger.org.hibernate.connection.DriverManagerConnectionProvider=INFO  

############################################################################  
#          框架或开发包log配置
############################################################################ 
#Spring框架配置
log4j.logger.org.springframework=INFO
#Spring JDBC配置
log4j.logger.org.springframework.jdbc.support=INFO  
#Spring 调度 配置
log4j.logger.org.springframework.scheduling=INFO  
#CXF LOG配置  
log4j.logger.org.apache.cxf=INFO,WS
#commons LOG配置
log4j.logger.org.apache.commons=INFO
#模板引擎 LOG配置
log4j.logger.org.apache.velocity=ERROR
#标签 LOG配置
log4j.logger.org.displaytag=ERROR
#JSON异常配置
log4j.logger.net.sf.json=ERROR
#hnisi开发代码 LOG配置
log4j.logger.cn.com.hnisi=INFO